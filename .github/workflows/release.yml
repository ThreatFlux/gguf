name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Get release version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release
            
            ### Features
            - 
            
            ### Bug Fixes
            - 
            
            ### Documentation
            - 
            
            **Full Changelog**: https://github.com/ThreatFlux/gguf/compare/previous...${{ env.RELEASE_VERSION }}

  build-release:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: gguf-cli
            asset_name: gguf-cli-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: gguf-cli
            asset_name: gguf-cli-linux-arm64
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: gguf-cli.exe
            asset_name: gguf-cli-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: gguf-cli
            asset_name: gguf-cli-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: gguf-cli
            asset_name: gguf-cli-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross

      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }} --package gguf-cli
          else
            cargo build --release --target ${{ matrix.target }} --package gguf-cli
          fi
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }} --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}